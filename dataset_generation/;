import numpy as np
import os 
import rasterio

from typing import Dict

# Names to use for saving and reading data partitions.
DATA_TRAIN_NAME = "train"
DATA_VALIDATION_NAME = "validation"
DATA_FINETUNING_NAME = "finetuning"
DATA_TEST_NAME = "test"

# File name for the config file specifying how to create the dataset.
DATASET_CONFIG_NAME = "dataset_config"

class InvalidDatasetTypeError(Exception):
    "Error raised when an invalid dataset is provided to a function."""
    pass

class DatasetType(Enum):
    """Defines possible dataset types."""
    TRAIN = 0
    VALIDATION = 1
    FINETUNING = 2
    TEST = 3

def get_dataset_file_path(data_dir: str, dataset_type: DatasetType) -> str:
    """Gets the path to dataset coordinates for a given partition type.

    Args:
        data_dir:
        partition_type:

    Returns:

    """
    if dataset_type == DatasetType.TRAIN:
        data_file = DATA_TEST_NAME
        
    elif dataset_type == DatasetType.VALIDATION:
        data_file = DATA_VALIDATION_NAME

    elif dataset_type == DatasetType.FINETUNING:
        data_file = DATA_FINETUNING_NAME

    elif dataset_type == DatasetType.TEST:
        data_file = DATA_TEST_NAME

    else:
        raise InvalidDatasetTypeError()

    return  os.path.join(data_dir, data_file)

def get_dataset_config_path(dataset_dir: str) -> str:
    """Gets the path to the dataset config file for a given dataset. 

    Args:
        dataset_dir: The lowest level dir for the dataset containing the config file.
    
    Returns:
        The path to the tiles directory.
    """
     return os.path.join(dataset_dir, DATASET_CONFIG_NAME)


def read_tif_to_np(tif_path: str):
    """Reads a tif file and converts it into a numpy.ndarray.
    
    Arg:
        tif_path: The full path to the tif file to read.
    
    Returns:
        A numpy.ndarray containing the tif file data. The returned tif has a rolled
        dimension and so the input is in the shape (channels, height width).
    
    """
    with rasterio.open(tif_path) as f:
        return f.read()

def apply_remap_values(labels: np.ndarray, label_map: Dict[int, int]) -> np.ndarray:
    """Reassigns values inplace in an numpy array given a provided mapping.
    
    Args:
        labels: An ndarray of labels.
        label_map: A dict[int, int] mapping label classes [original, new].
        
    """
    for l1, l2 in label_map.items():
        labels[labels == l1] = l2
 
def mkdir_clean(dir_path: str):
    """Makes an empty directory and clears all files within any existing dir of
    the same name.

    Args:
        dir_path: The path to the directory to clear and create.

    """
    if os.path.exists(dir_path):
        shutil.rmtree(dir_path)
    os.mkdir(dir_path)


